import random
import collections
from abc import ABC, abstractmethod

"""
Mastermind

Copyright 2017 George Boukeas (boukeas@gmail.com)
Άδεια Χρήσης: 3-clause BSD License
(https://opensource.org/licenses/BSD-3-Clause)

Περιγραφή του παιχνιδιού (Αγγλικά):
https://en.wikipedia.org/wiki/Mastermind_(board_game)

Οι βασικές οντότητες της υλοποίησης είναι:

Το παιχνίδι (κλάση MastermindGame)

    Σε κάθε παιχνίδι Mastermind, συμμετέχουν δύο παίκτες, ο Codemaker και ο
    Codebreaker. Ο Codemaker σχηματίζει στην αρχή του παιχνιδιού μια μυστική
    κωδική λέξη (με τα επιμέρους στοιχεία της λέξεις να αντλούνται από ένα
    δεδομένο σύνολο). Ο Codebreaker διαθέτει ένα πλήθος προσπαθειών για να
    καταφέρει να μαντέψει την μυστική κωδική λέξη. Σε κάθε προσπάθεια προτείνει
    μια πιθανή κωδική λέξη και ο Codemaker την αξιολογεί.

    Ένα αντικείμενο της κλάσης MastermindGame αντιστοιχεί σε ένα παιχνίδι με
    συγκεκριμένο σύνολο στοιχείων από το οποίο σχηματίζονται οι κωδικές λέξεις
    (αριθμοί, γράμματα, χρώματα, κλπ), συγκεκριμένο μέγεθος των κωδικών λέξεων
    (π.χ. τέσσερα στοιχεία) και συγκεκριμένο πλήθος προσπαθειών για τον
    Codebreaker. Η μέθοδος play της κλάσης Mastermind υλοποιεί τη διαδικασία
    του παιχνιδιού.

Οι παίκτες (βασική κλάση CodePlayer και υποκλάσεις Codemaker και Codebreaker)

    Ο ρόλος του Codemaker είναι να επιλέγει την μυστική κωδική λέξη στην αρχή
    του παιχνιδιού, να παρέχει στον Codebreaker ανατροφοδότηση για τις κωδικές
    λέξεις που επιλέγει και να αποκαλύπτει την μυστική κωδική λέξη στο τέλος
    του παιχνιδιού.

    Η κλάση Codemaker παρέχει abstract μεθόδους γι' αυτές τις λειτουργίες που
    θα πρέπει να υλοποιηθούν από τις υποκλάσεις της.

    Ο ρόλος του Codebreaker είναι να επιλέγει σε κάθε προσπάθεια μια πιθανή
    κωδική λέξη, να δέχεται την ανατροφοδότηση του Codemaker γι' αυτές τις
    επιλογές του και να ενημερώνεται για την μυστική κωδική λέξη στο τέλος
    του παιχνιδιού.

    Η κλάση Codebreaker παρέχει abstract μεθόδους γι' αυτές τις λειτουργίες
    που θα πρέπει να υλοποιηθούν από τις υποκλάσεις της.

Μια στρατηγική για τον Codebreaker (βασική κλάση Strategy)

    Οι κινήσεις ενός Codebreaker υπαγορεύονται από μια στρατηγική. Μια
    στρατηγική παρέχει μια πρόταση ως προς την κωδική λέξη που πρέπει να
    επιλέξει σε κάθε βήμα ο Codebreaker και επηρρεάζεται από τις
    ανατροφοδοτήσεις που λαμβάνει ο Codebreaker για τις κωδικές λέξεις
    που επιλέγει.

    Η κλάση Strategy παρέχει abstract μεθόδους γι' αυτές τις λειτουργίες που
    θα πρέπει να υλοποιηθούν από τις υποκλάσεις της.

    Σίγουρα δεν είναι εξαρχής σαφές γιατί θα πρέπει η στρατηγική να αποτελεί
    ξεχωριστή κλάση και όχι τμήμα του Codebreaker. Ο λόγος είναι επειδή ένας
    παίκτης μπορεί να χρησιμοποιεί πολλαπλές στρατηγικές ή να μην ακολουθεί
    σε κάθε προσπάθεια τις προτάσεις που του παρέχει μια στρατηγική.

Οι κωδικές λέξεις (κλάση Code, υποκλάση της tuple)

    Κάθε κωδική λέξη είναι μια πλειάδα, με μέγεθος και στοιχεία που αντλούνται
    από τα δεδομένα του παιχνιδιού.

    Το γεγονός ότι η κλάση Code είναι υποκλάση της tuple μας επιτρέπει να
    χρησιμοποιήσουμε για τις κωδικές λέξεις όλες τις μεθόδους που προσφέρονται
    για τις πλειάδες.

Ο αποτιμητής (κλάση Evaluator)

    Βασικό στοιχείο του παιχνιδιού είναι η δυνατότητα σύγκρισης δύο κωδικών
    λέξεων ώστε να εκτιμηθεί σε πόσες θέσεις συμπίπτουν και πόσα επιπλέον
    κοινά στοιχεία έχουν σε διαφορετικές θέσεις. Αυτή η λειτουργία είναι
    απαραίτητη σε πολλές οντότητες του παιχνιδιού και για διαφορετικούς λόγους,
    γι' αυτό και απομονώθηκε σε αυτή την ξεχωριστή κλάση.

    Η μέθοδος αποτίμησης είναι στατική (class method) κι έτσι δεν χρειάζεται
    να δημιουργηθούν αντικείμενα αυτής της κλάσης για να χρησιμοποιηθεί η
    μέθοδος.
"""

class MastermindGame:
    """ H κλάση που αντιστοιχεί σ' ένα παιχνίδι Mastermind.

        Ένα αντικείμενο της κλάσης MastermindGame αντιστοιχεί σε ένα παιχνίδι
        με συγκεκριμένο σύνολο στοιχείων από το οποίο σχηματίζονται οι κωδικές
        λέξεις (αριθμοί, γράμματα, χρώματα, κλπ), συγκεκριμένο μέγεθος των
        κωδικών λέξεων (π.χ. 4 στοιχεία) και συγκεκριμένο πλήθος προσπαθειών
        για τον Codebreaker.

        Η βασική μέθοδος είναι η play(), η οποία υλοποιεί όλη τη διαδικασία
        του παιχνιδιού και την αλληλεπίδραση ανάμεσα στον παίκτη που επιλέγει
        την μυστική κωδική λέξη (Codemaker) και τον παίκτη που επιχειρεί να
        την μαντέψει (Codebreaker).
    """

    def __init__(self, elements=("1", "2", "3", "4", "5", "6"), length=4):
        """ Κατασκευάζει ένα παιχνίδι Mastermind (ένα αντικείμενο της κλάσης
            MastermindGame).

            elements: μια πλειάδα στοιχείων που σχηματίζουν τις κωδικές λέξεις
            length: το μέγεθος των κωδικών λέξεων
        """
        self.elements = elements
        self.length = length

    def information(self):
        """ Εμφανίζει πληροφορίες για το παιχνίδι.
        """
        print("Θα παίξουμε Mastermind.")
        print("Οι κωδικές λέξεις θα αποτελούνται από", self.length,
              "(πιθανώς επαναλαμβανόμενα) στοιχεία,")
        print("επιλεγμένα από την εξής λίστα:", " ".join(self.elements),
              end="\n\n")

    def play(self, codemaker, codebreaker, tries=6):
        """ Υλοποιεί τη διαδικασία του παιχνιδιού ανάμεσα σε δύο παίκτες.

            codemaker: ο παίκτης που επιλέγει τη μυστική κωδική λέξη
            codebreaker: ο παίκτης που προσπαθεί να την μαντέψει
            tries: το πλήθος των προσπαθειών που έχει ο codebreaker
        """
        self.information()

        # επιλογή μυστικής κωδικής λέξης από τον codemaker
        codemaker.select_secret()

        # αρχικές τιμές για τις μεταβλητές που ελέγχουν την επανάληψη
        found = False
        nb_tries = tries

        # επανάληψη: μέχρι να βρεθεί η μυστική κωδική λέξη ή
        #   να εξαντληθούν οι προσπάθειες
        while not found and nb_tries:

            print("Απομένουν", nb_tries, "προσπάθειες.")

            # επιλογή κωδικής λέξης από τον codebreaker
            code = codebreaker.select_code()
            # αποτίμηση κωδικής λέξης από τον codemaker
            nb_black, _ = evaluation = codemaker.evaluate_code(code)
            # ενημέρωση του codebreaker για την αποτίμηση
            codebreaker.inform_evaluation(code, evaluation)

        	# έλεγχος αποτίμησης
            if nb_black == self.length:
                found = True
            else:
                nb_tries -= 1

        # ολοκλήρωση του παιχνιδιού
        if found:
            # εντοπισμός της μυστικής κωδικής λέξης
            print("Ο κώδικας βρέθηκε σε", tries - nb_tries + 1, "προσπάθειες.")
        else:
            # εξάντληση των προσπαθειών
            print("Οι προσπάθειες εξαντλήθηκαν.")
            # ο codebreaker ενημερώνεται για την κωδική λέξη
            codebreaker.inform_secret(codemaker.reveal_secret())


class CodePlayer(ABC):
    """ Η κλάση των παικτών του Mastermind.

        Κάθε παίκτης έχει ένα όνομα και συμμετέχει σε συγκεκριμένο παιχνίδι.
    """

    def __init__(self, name, game):
        self.name = name
        self.game = game


class Codemaker(CodePlayer):
    """ Ο ρόλος του Codemaker είναι να επιλέγει την μυστική κωδική λέξη στην
        αρχή του παιχνιδιού, να παρέχει στον Codebreaker ανατροφοδότηση για
        τις κωδικές λέξεις που επιλέγει και να αποκαλύπτει την μυστική κωδική
        λέξη στο τέλος του παιχνιδιού.

        Η κλάση Codemaker παρέχει abstract μεθόδους γι' αυτές τις λειτουργίες
        που θα πρέπει να υλοποιηθούν από τις υποκλάσεις της.
    """

    def __init__(self, name, game):
        super().__init__(name, game)

    @abstractmethod
    def select_secret(self):
        """ Επιλέγει τη μυστική κωδική λέξη.
        """
        raise NotImplementedError

    @abstractmethod
    def evaluate_code(self, code):
        """ Επιστρέφει μια αποτίμηση μιας κωδικής λέξης, σε σχέση με τη
            μυστική κωδική λέξη.

            code: η κωδική λέξη προς αποτίμηση
        """
        raise NotImplementedError

    @abstractmethod
    def reveal_secret(self):
        """ Αποκαλύπτει την μυστική κωδική λέξη, μετά το τέλος του παιχνιδιού.
        """
        raise NotImplementedError


class Codebreaker(CodePlayer):
    """ Ο ρόλος του Codebreaker είναι να επιλέγει σε κάθε προσπάθεια μια
        πιθανή κωδική λέξη, να δέχεται την ανατροφοδότηση του Codemaker
        γι' αυτές τις επιλογές του και να ενημερώνεται για την μυστική
        κωδική λέξη στο τέλος του παιχνιδιού.

        Η κλάση Codebreaker παρέχει abstract μεθόδους γι' αυτές τις λειτουργίες
        που θα πρέπει να υλοποιηθούν από τις υποκλάσεις της.
    """

    def __init__(self, name, game):
        super().__init__(name, game)

    @abstractmethod
    def select_code(self):
        """ Επιλέγει μια πιθανή κωδική λέξη.
        """
        raise NotImplementedError

    @abstractmethod
    def inform_evaluation(self, code, evaluation):
        """ Πληροφορεί τον παίκτη για την αποτίμηση μιας κωδικής λέξης.

            code: η κωδική λέξη που αποτιμήθηκε
            evaluation: η αποτίμηση της λέξης (ένα ζεύγος ακέραιων τιμών)
        """
        raise NotImplementedError

    @abstractmethod
    def inform_secret(self, secret):
        """ Πληροφορεί τον παίκτη, μετά το τέλος του παιχνιδιού, ποια ήταν
            η μυστική κωδική λέξη.
        """
        raise NotImplementedError


class Strategy(ABC):
    """ Οι κινήσεις ενός Codebreaker υπαγορεύονται από μια στρατηγική. Μια
        στρατηγική παρέχει μια πρόταση ως προς την κωδική λέξη που πρέπει να
        επιλέξει σε κάθε βήμα ο Codebreaker και επηρρεάζεται από τις
        ανατροφοδοτήσεις που λαμβάνει ο Codebreaker για τις κωδικές λέξεις που
        επιλέγει.

        Η κλάση Strategy παρέχει abstract μεθόδους γι' αυτές τις λειτουργίες
        που θα πρέπει να υλοποιηθούν από τις υποκλάσεις της.
    """

    def __init__(self, game):
        self.game = game

    @abstractmethod
    def suggest_code(self):
        """ Προτείνει μια πιθανή κωδική λέξη.
        """
        raise NotImplementedError

    @abstractmethod
    def add_evaluation(self, code, evaluation):
        """ Καταγράφει την αποτίμηση μιας κωδικής λέξης.

            code: η κωδική λέξη που αποτιμήθηκε
            evaluation: η αποτίμηση της λέξης (ένα ζεύγος ακέραιων τιμών)
        """
        raise NotImplementedError


class Code(tuple):
    """ Κάθε κωδική λέξη είναι μια πλειάδα, με μέγεθος και στοιχεία που
        αντλούνται από τα δεδομένα του παιχνιδιού.
    """

    def __repr__(self):
        return " ".join(self)


class Evaluator:
    """ Η κλάση για την αποτίμηση κωδικών λέξεων. Η βασική μέθοδος της κλάσης
        είναι η compare, η οποία συγκρίνει δύο κωδικές λέξεις, δηλαδή
        υπολογίζει σε πόσες θέσεις συμπίπτουν και πόσα ακόμα κοινά στοιχεία
        έχουν σε διαφορετική θέση.

        Δεν είναι ανάγκη να δημιουργηθούν αντικείμενα αυτής της κλάσης, η
        λειτουργικότητά της μπορεί να χρησιμοποιηθεί καλώντας απευθείας τις
        μεθόδους της κλάσης (class methods).
    """

    @staticmethod
    def compare(code1, code2):
        """ Συγκρίνει δύο κωδικές λέξεις κι επιστρέφει δύο ακεραίους: Ο πρώτος
            είναι το πλήθος των στοιχείων που βρίσκονται στην ίδια θέση.
            Ο δεύτερος είναι το πλήθος των στοιχείων που υπάρχουν και στις δύο
            κωδικές λέξεις, αλλά σε διαφορετική θέση.

            Η συγκεκριμένη υλοποίηση κατασκευάζει, για κάθε μία από τις δύο
            κωδικές λέξεις, ένα ευρετήριο θέσεων, δηλαδή ένα dict, με κλειδιά
            τα στοιχεία της κωδικής λέξης και αντίστοιχες τιμές τα σύνολα των
            θέσεων όπου βρίσκεται τα κάθε στοιχείο.
            
            π.χ. για την κωδική λέξη ("2", "1", "1", "4") το ευρετήριο είναι
            {"2": {0}, "1": {1, 2}, "4": {3}}

            code1, code2: Οι δύο λέξεις που συγκρίνονται
        """
        # κατασκευή ευρετηρίου θέσεων για την πρώτη κωδική λέξη
        index1 = collections.defaultdict(set)
        for position, element in enumerate(code1):
            index1[element].add(position)

        # κατασκευή ευρετηρίου θέσεων για τη δεύτερη κωδική λέξη
        # αλλά μόνο για τα στοιχεία που υπάρχουν και στην πρώτη
        index2 = collections.defaultdict(set)
        for position, element in enumerate(code2):
            if element in index1:
                index2[element].add(position)

        nb_black = 0
        nb_white = 0

        # για κάθε στοιχείο και τις θέσεις του στη δεύτερη κωδική λέξη
        # (διατρέχουμε το δεύτερο ευρετήριο γιατί γνωρίζουμε ότι τα στοιχεία
        #   του υπάρχουν σίγουρα και στο πρώτο, ενώ το αντίστροφο δεν ισχύει)
        for element, positions2 in index2.items():
            # ανασύρονται οι θέσεις του στοιχείου στην πρώτη κωδική λέξη
            positions1 = index1[element]
            # βρίσκεται το μέγεθος της τομής των θέσεων
            nb_common = len(positions1 & positions2)
            # αυτό είναι το πλήθος των κοινών θέσεων γι' αυτό το στοιχείο
            nb_black += nb_common
            # αν υπάρχουν και άλλα στοιχεία, είναι κοινά αλλά σε διαφορετική θέση
            nb_white += min(len(positions1) - nb_common, len(positions2) - nb_common)

        return nb_black, nb_white

    @staticmethod
    def compare_conv(code1, code2):
        """ Συγκρίνει δύο κωδικές λέξεις κι επιστρέφει δύο ακεραίους: Ο πρώτος
            είναι το πλήθος των στοιχείων που βρίσκονται στην ίδια θέση.
            Ο δεύτερος είναι το πλήθος των στοιχείων που υπάρχουν και στις δύο
            κωδικές λέξεις, αλλά σε διαφορετική θέση.

            code1, code2: Οι δύο λέξεις που συγκρίνονται
        """
        # η διαδικασία αποτίμησης "μαρκάρει" τις λέξεις,
        # οπότε χρειαζόμαστε αντίγραφα
        code1 = list(code1)
        code2 = list(code2)

        # το πλήθος των θέσεων όπου οι λέξεις συμπίπτουν
        # οι θέσεις μαρκάρονται με "."
        nb_black = 0
        for position, _ in enumerate(code1):
            if code1[position] == code2[position]:
                code1[position] = code2[position] = "."
                nb_black += 1

        # το πλήθος των στοιχείων που υπάρχουν και στις
        # δύο λέξεις αλλά δεν συμπίπτουν ως προς τη θέση
        nb_white = 0
        for position, element in enumerate(code1):
            if element != ".":
                for other_position, _ in enumerate(code2):
                    if code1[position] == code2[other_position]:
                        code1[position] = code2[other_position] = "."
                        nb_white += 1
                        break

        # επιστροφή αποτίμησης
        return nb_black, nb_white

    @classmethod
    def is_compatible(cls, code1, code2, evaluation):
        """ Ελέγχει αν δύο κωδικές λέξεις είναι συμβατές
            μεταξύ τους, με βάση μια αποτίμηση.

        	code1, code2: οι κωδικές λέξεις
    	    evaluation: η αποτίμηση (πλειάδα 2 θέσεων)
        """
        return cls.compare(code1, code2) == evaluation


"""
Υποκλάσεις των abstract κλάσεων για τους παίκτες

Αυτοματοποιημένος Codemaker (κλάση MachineMaker, υποκλάση της Codemaker)

    Η βασική λειτουργία ενός μηχανικού codemaker είναι να επιλέγει με τυχαίο
    τρόπο, στην αρχή του παιχνιδιού, την μυστική κωδική λέξη. Για τις 
    αποτιμήσεις των πιθανών κωδικών λέξεων του Codebreaker χρησιμοποιεί τον
    Evaluator.

Αυτοματοποιημένος Codebreaker (κλάση MachineBreaker, υποκλάση της Codebreaker)

    Η βασική λειτουργία ενός μηχανικού codemaker είναι η επιλογή μιας πιθανής
    κωδικής λέξης σε κάθε προσπάθεια, η οποία ουσιαστικά υπαγορεύεται από την
    στρατηγική την οποία δέχεται σαν παράμετρο (γι' αυτό και η κλάση είναι
    απλούστατη).

Ο Χρήστης ως Παίκτης (κλάση HumanPlayer, υποκλάση της CodePlayer)

    Η κλάση αυτή δεν σχετίζεται με το ρόλο του χρήστη ως codebreaker ή 
    codemaker, απλά παρέχει μια μέθοδο που επιτρέπει την είσοδο κωδικών λέξεων
    από το χρήστη. Αυτή είναι μια απαραίτητη λειτουργία όταν ένας από τους δύο
    παίκτες είναι ο χρήστης, όποιος κι αν είναι ο ρόλος του.

Ο Χρήστης ως Codemaker (κλάση HumanMaker, υποκλάση των HumanPlayer, Codemaker)

    Η βασική λειτουργία των αντικειμένων αυτής της κλάσης είναι να 
    αλληλεπιδρούν με τον χρήστη στο ρόλο του codemaker, δηλαδή να εισάγουν
    από το χρήστη την αποτίμηση των πιθανών κωδικών λέξεων που δοκιμάζει ο 
    codebreaker σε κάθε προσπάθεια.

Ο Χρήστης ως Codebreaker (κλάση HumanBreaker, υποκλάση των HumanPlayer και
    Codebreaker)

    Η βασική λειτουργία των αντικειμένων αυτής της κλάσης είναι να 
    αλληλεπιδρούν με τον χρήστη στο ρόλο του codebreaker, δηλαδή να εισάγουν 
    από το χρήστη την πιθανή κωδική λέξη που επιθυμεί να δοκιμάσει σε κάθε
    προσπάθεια.

Ο Χρήστης ως CodeBreaker με στρατηγική (κλάση HumanAugmentedBreaker, υποκλάση
    της HumanBreaker)

    Τα αντικείμενα αυτής της κλάσης δέχονται ως επιπλέον παράμετρο μια
    στρατηγική, την οποία μπορεί να χρησιμοποιήσει ο χρήστης για να δεχθεί
    *υποδείξεις* (χωρίς βέβαια να είναι υποχρεωμένος να τις ακολουθήσει, σε
    αντίθεση μ' έναν απλό μηχανικό codebreaker).
"""

class MachineMaker(Codemaker):
    """ Η κλάση των μηχανικών codemaker παικτών. Η βασική λειτουργία ενός
        μηχανικού codemaker είναι να επιλέγει με τυχαίο τρόπο, στην αρχή του
        παιχνιδιού, την μυστική κωδική λέξη. Για τις αποτιμήσεις των πιθανών
        κωδικών λέξεων του Codebreaker χρησιμοποιεί τον Evaluator.
    """

    def __init__(self, name, game):
        super().__init__(name, game)

    def select_secret(self):
        """ Δημιουργεί μια τυχαία κωδική λέξη, με πιθανές επαναλήψεις στοιχείων.
        """
        self.secret = Code(random.choice(self.game.elements)
                           for p in range(self.game.length))

    def evaluate_code(self, code):
        """ Επιστρέφει την αποτίμηση μιας κωδικής λέξης, σε σχέση με την
            μυστική κωδική λέξη που έχει επιλεχθεί. Επιστρέφει δύο ακεραίους:
            ο πρώτος είναι το πλήθος των στοιχείων της κωδικής λέξης στη σωστή
            θέση και ο δεύτερος είναι το πλήθος των στοιχείων που υπάρχουν και
            στην μυστική κωδική λέξη αλλά σε διαφορετική θέση.

            code: η κωδική λέξη προς αποτίμηση
        """
        return Evaluator.compare(self.secret, code)

    def reveal_secret(self):
        """ Επιστρέφει την μυστική κωδική λέξη που είχε επιλεχθεί στην αρχή
            του παιχνιδιού.
        """
        return self.secret


class MachineBreaker(Codebreaker):
    """ Η κλάση των μηχανικών codebreaker παικτών. Η βασική λειτουργία ενός
        μηχανικού codemaker είναι η επιλογή μιας πιθανής κωδικής λέξης σε κάθε
        προσπάθεια, η οποία ουσιαστικά υπαγορεύεται από την στρατηγική την
        οποία δέχεται σαν παράμετρο.
    """

    def __init__(self, name, game, strategy):
        super().__init__(name, game)
        self.strategy = strategy
        # αν η στρατηγική είναι υποκλάση της PossibleSetStrategy
        # τότε διατηρεί το σύνολο των συμβατών κωδικών λέξεων,
        # οπότε χρησιμοποιούνται μέθοδοι που κάνουν επιπρόσθετους
        # ελέγχους.
        if isinstance(strategy, PossibleSetStrategy):
            self.inform_evaluation = self.consistent_evaluation
            self.inform_secret = self.check_secret

    def select_code(self):
        """ Επιστρέφει την κωδική λέξη που υπαγορεύεται από την στρατηγική.
        """
        return self.strategy.suggest_code()

    def inform_evaluation(self, code, evaluation):
        """ Πληροφορεί την στρατηγική για την αποτίμηση μιας κωδικής λέξης.
            Ο ίδιος ο μηχανικός παίκτης δεν κάνει καμία άλλη επεξεργασία
            της αποτίμησης.

            code: η κωδική λέξη που αποτιμήθηκε
            evaluation: η αποτίμηση της λέξης (ένα ζεύγος ακέραιων τιμών)
        """
        self.strategy.add_evaluation(code, evaluation)

    def consistent_evaluation(self, code, evaluation):
        """ Πληροφορεί την στρατηγική για την αποτίμηση μιας κωδικής λέξης.
            Αν η λίστα των συμβατών κωδικών λέξεων (που διατηρείται από την
            στρατηγική) απομείνει κενή μετά τη νέα αποτίμηση, το παιχνίδι
            τερματίζεται γιατί κάποια αποτίμηση του codemaker ήταν λάθος.

            code: η κωδική λέξη που αποτιμήθηκε
            evaluation: η αποτίμηση της λέξης (ένα ζεύγος ακέραιων τιμών)
        """
        self.strategy.add_evaluation(code, evaluation)
        if not self.strategy.possible:
            print("Δεν υπάρχουν κώδικες συνεπείς με τις αποτιμήσεις που έχεις δώσει.")
            print("Έκανες κάποιο λάθος και το παιχνίδι δεν μπορεί να συνεχιστεί.")
            exit()
        elif len(self.strategy.possible) > 1:
            print("Υπάρχουν", len(self.strategy.possible), "διαφορετικοί πιθανοί κώδικες.")

    def inform_secret(self, secret):
        """ Καλείται στο τέλος του παιχνιδιού ως ενημέρωση του μηχανικού παίκτη
            για την μυστική κωδική λέξη. Στην πραγματικότητα δεν κάνει τίποτα.
        """
        pass

    def check_secret(self, secret):
        """ Καλείται στο τέλος του παιχνιδιού ως ενημέρωση του μηχανικού παίκτη
            για την μυστική κωδική λέξη. Ελέγχει αν η μυστική κωδική λέξη ανήκει
            πράγματι στη λίστα των συμβατών κωδικών λέξεων.
        """
        if secret in self.strategy.possible:
            print("OK, προφανώς δεν ήταν αρκετές οι προσπάθειες...")
        else:
            print("Αυτός ο κώδικας δεν είναι συνεπής με τις αποτιμήσεις που έχεις δώσει.")
            print("Έγινε κάποιο λάθος και το παιχνίδι είναι άκυρο.")


class HumanPlayer(CodePlayer):
    """ Ο χρήστης ως παίκτης. Βασικός ρόλος αυτής της κλάσης είναι να παρέχει
        τη μέθοδο read_code που επιτρέπει την είσοδο κωδικών λέξεων από το
        χρήστη. Αυτή είναι μια απαραίτητη λειτουργία όταν ένας από τους δύο
        παίκτες είναι ο χρήστης, όποιος κι αν είναι ο ρόλος του.
    """

    def __init__(self, name, game):
        super().__init__(name, game)

    def read_code(self, prompt):
        """ Προτρέπει το χρήστη να εισάγει μια κωδική λέξη και την επιστρέφει,
            εξασφαλίζοντας πρώτα ότι είναι έγκυρη, με βάση τις παραμέτρους του
            παιχνιδιού.

            prompt: η προτροπή που εμφανίζεται στο χρήστη
        """
        # επανάληψη: μέχρι να δοθεί έγκυρη κωδική λέξη
        while True:
            # εμφάνιση προτροπής
            print(prompt, end="")
            # η είσοδος χωρίζεται όπου υπάρχουν κενά για να προκύψει η κωδική λέξη
            code = input().lower().strip().split()
            # έλεγχος εγκυρότητας
            if len(code) != self.game.length:
                # μη-επιτρεπτό μήκος
                print("Ο κώδικας πρέπει να έχει μέγεθος", self.game.length, end=".\n")
            elif [l for l in code if l not in self.game.elements]:
                # μη-επιτρεπτό στοιχείο
                print("Επιτρέπονται τα:", ", ".join(self.game.elements))
            else:
                # έγκυρη κωδική λέξη, τέλος
                break
        # επιστροφή έγκυρης κωδικής λέξης
        return Code(code)


class HumanMaker(HumanPlayer, Codemaker):
    """ Η κλάση των codemaker χρηστών. Η βασική λειτουργία των αντικειμένων
        αυτής της κλάσης είναι να αλληλεπιδρούν με τον χρήστη στο ρόλο του
        codemaker, δηλαδή να εισάγουν από το χρήστη την αποτίμηση των πιθανών
        κωδικών λέξεων που δοκιμάζει ο codebreaker σε κάθε προσπάθεια.
    """

    def __init__(self, name, game):
        super().__init__(name, game)

    def select_secret(self):
        """ Ζητά από το χρήστη να επιλέξει την μυστική κωδική λέξη.
            Ο χρήστης δεν πληκτρολογεί τη λέξη, απλά την επιλέγει.
        """
        print(self.name + ", επίλεξε την μυστική κωδική λέξη.", end=" ")
        print("Όταν είσαι έτοιμος/η, πάτα το ENTER.", end=" ")
        input()

    def evaluate_code(self, code):
        """ Ζητάει από το χρήστη να εισάγει την αποτίμηση μιας κωδικής λέξης,
            σε σχέση με την μυστική κωδική λέξη που έχει επιλέξει. Ο πρώτος
            είναι το πλήθος των στοιχείων της κωδικής λέξης στη σωστή θέση και
            ο δεύτερος είναι το πλήθος των στοιχείων που υπάρχουν και στην
            μυστική κωδική λέξη αλλά σε διαφορετική θέση.

            code: η κωδική λέξη προς αποτίμηση
        """
        print("Επιλέχθηκε η κωδική λέξη:", code)
        while True:
            print(self.name + ", ποιά είναι η αποτίμηση; ", end="")
            try:
                nb_black, nb_white = (int(x) for x in input().split())
                if (nb_black < 0 or nb_black > self.game.length or
                        nb_white < 0 or nb_white > self.game.length or
                        nb_white + nb_black > self.game.length):
                    raise ValueError
            except ValueError:
                print("Πρέπει να δώσεις 2 αριθμούς (0-4), χωρισμένους με κενό.")
            else:
                break
        return nb_black, nb_white

    def reveal_secret(self):
        """ Ζητάει από το χρήστη να πληκτρολογήσει την μυστική κωδική λέξη που
            είχε επιλέξει στην αρχή του παιχνιδιού.
        """
        return self.read_code(self.name + ", ποιός ήταν ο μυστικός κωδικός; ")


class HumanBreaker(HumanPlayer, Codebreaker):
    """ Η κλάση των codebreaker χρηστών. Η βασική λειτουργία των αντικειμένων
        αυτής της κλάσης είναι να αλληλεπιδρούν με τον χρήστη στο ρόλο του
        codebreaker, δηλαδή να εισάγουν από το χρήστη την πιθανή κωδική λέξη
        που επιθυμεί να δοκιμάσει σε κάθε προσπάθεια.
    """

    def select_code(self):
        """ Ζητάει από το χρήστη να πληκτρολογήσει μια κωδική λέξη.
        """
        return self.read_code(self.name + ", μάντεψε την μυστική κωδική λέξη: ")

    def inform_evaluation(self, code, evaluation):
        """ Εμφανίζει στο χρήστη την αποτίμηση της κωδικής λέξης που επέλεξε.

            code: η κωδική λέξη που αποτιμήθηκε
            evaluation: η αποτίμηση της λέξης (ένα ζεύγος ακέραιων τιμών)
        """
        nb_black, nb_white = evaluation
        print("Αποτίμηση:", nb_black, "στη θέση τους και", nb_white, "σε άλλη θέση.")

    def inform_secret(self, secret):
        """ Εμφανίζει στο χρήστη την μυστική κωδική λέξη secret.
        """
        print("Η μυστική κωδική λέξη ήταν", secret)


class HumanAugmentedBreaker(HumanBreaker):
    """ Τα αντικείμενα αυτής της κλάσης δέχονται ως επιπλέον παράμετρο μια
        στρατηγική, την οποία μπορεί να χρησιμοποιήσει ο χρήστης για να δεχθεί
        *υποδείξεις* (χωρίς βέβαια να είναι υποχρεωμένος να τις ακολουθήσει, σε
        αντίθεση μ' έναν απλό μηχανικό codebreaker).
    """

    def __init__(self, name, game, strategy):
        super().__init__(name, game)
        self.strategy = strategy

    def read_code(self, prompt):
        """ Προτρέπει το χρήστη να εισάγει μια κωδική λέξη και την επιστρέφει,
            εξασφαλίζοντας πρώτα ότι είναι έγκυρη, με βάση τις παραμέτρους του
            παιχνιδιού.

            Αν ο χρήστης πληκτρολογήσει τη λέξη "hint", τότε του προτείνεται
            μια κωδική λέξη, η οποία προκύπτει από την στρατηγική.

            prompt: η προτροπή που εμφανίζεται στο χρήστη
        """
        # επανάληψη: μέχρι να δοθεί έγκυρη κωδική λέξη
        while True:
            # εμφάνιση προτροπής
            print(prompt, end="")
            # η είσοδος χωρίζεται όπου υπάρχουν κενά για να προκύψει η κωδική λέξη
            code = input().lower().strip().split()
            # έλεγχος εγκυρότητας
            if "hint" in code:
                print("Προτείνεται η κωδική λέξη:", self.strategy.suggest_code())
            elif len(code) != self.game.length:
                # μη-επιτρεπτό μήκος
                print("Ο κώδικας πρέπει να έχει μέγεθος", self.game.length, end=".\n")
            elif [l for l in code if l not in self.game.elements]:
                # μη-επιτρεπτό στοιχείο
                print("Επιτρέπονται τα:", ", ".join(self.game.elements))
            else:
                # έγκυρη κωδική λέξη, τέλος
                break
        # επιστροφή έγκυρης κωδικής λέξης
        return Code(code)

    def inform_evaluation(self, code, evaluation):
        """ Εμφανίζει στο χρήστη την αποτίμηση της κωδικής λέξης που επέλεξε
            και πληροφορεί την στρατηγική για την αποτίμηση αυτή.

            code: η κωδική λέξη που αποτιμήθηκε
            evaluation: η αποτίμηση της λέξης (ένα ζεύγος ακέραιων τιμών)
        """
        HumanBreaker.inform_evaluation(self, code, evaluation)
        self.strategy.add_evaluation(code, evaluation)


"""
Υποκλάσεις των abstract κλάσεων για την στρατηγική

Τυχαία επιλογή κωδικής λέξης (κλάση RandomStrategy, υποκλάση της Strategy)

    Μια απλούστατη (και καθόλου αποτελεσματική) στρατηγική. Σε κάθε προσπάθεια
    επιλέγει μια εντελώς τυχαία κωδική λέξη, ανεξάρτητα από τις προηγούμενες
    κωδικές λέξεις και τις αποτιμήσεις τους.

Διατήρηση συνόλου συμβατών κωδικών λέξεων (κλάση PossibleStrategy, υποκλάση
    της Strategy)

    Μια "μήτρα" για οποιαδήποτε στρατηγική βασίζεται στο σύνολο των κωδικών
    λέξεων που είναι συμβατές με τις αποτιμήσεις των προηγούμενων κωδικών
    λέξεων. Ουσιαστικά πρόκειται για το σύνολο των κωδικών λέξεων στο οποίο
    έχει περιοριστεί η αναζήτηση για την μυστική κωδική λέξη.

Τυχαία επιλογή από το σύνολο συμβατών κωδικών λέξεων (κλάση
    PossibleSetRandomStrategy, υποκλάση της PossibleSetStrategy)

    Μια στρατηγική που επιλέγει τυχαία, σε κάθε προσπάθεια, μια από τις 
    συμβατές κωδικές λέξεις.

Αλγόριθμος του Knuth ή 5-guess algorithm (κλάση KnuthStrategy, υποκλάση της
    PossibleSetStrategy)

    για περισσότερες λεπτομέρειες, μπορείτε να ανατρέξετε στην αρχική 
    δημοσίευση του Knuth:
    http://www.cs.uni.edu/~wallingf/teaching/cs3530/resources/knuth-mastermind.pdf
"""

class RandomStrategy(Strategy):
    """ Η στρατηγική αυτή επιλέγει τυχαία μία κωδική λέξη, χωρίς να λαμβάνει
        υπόψη τις αποτιμήσεις των προηγούμενων κωδικών λέξεων.
    """

    def __init__(self, game):
        super().__init__(game)

    def suggest_code(self):
        """ Προτείνει μια τυχαία κωδική λέξη, με πιθανές επαναλήψεις στοιχείων.
        """
        return Code(random.choice(self.game.elements)
                    for p in range(self.game.length))

    def add_evaluation(self, code, evaluation):
        """ Αγνοεί πλήρως τις αποτιμήσεις των κωδικών λέξεων που δοκιμάζονται.
        """
        pass

class PossibleSetStrategy(Strategy):
    """ Τα αντικείμενα αυτής της κλάσης διατηρούν το σύνολο των κωδικών λέξεων
        που είναι συμβατές με τις γνωστές αποτιμήσεις.

        Η κλάση δεν παρέχει υλοποίηση για την συνάρτηση suggest_code, επομένως
        δεν πρόκειται για μια στρατηγική καθεαυτή, αλλά για μια abstract κλάση
        επάνω στην οποία θα βασιστούν υποκλάσεις που θα χρησιμοποιούν το σύνολο
        συμβατών κωδικών λέξεων για να υλοποιήσουν μια στρατηγική.
    """

    def generate(self, length):
        """ Κατασκευάζει *αναδρομικά* το σύνολο των πιθανών κωδικών λέξεων
            συγκεκριμένου μεγέθους.

            length: το μέγεθος των κωδικών λέξεων που θα δημιουργηθούν
        """
        if length == 1:
            # αν το μέγεθος είναι 1, επιστρέφεται ένα σύνολο με τις κωδικές
            # λέξεις μήκους 1, με βάση τα στοιχεία της συλλογής elements
            return set(Code(element) for element in self.game.elements)
        else:
            # διαφορετικά, επιστρέφονται οι κωδικές λέξεις μεγέθους length-1,
            # αφού προστεθούν σε αυτές τα μεμονωμένα στοιχεία της elements
            return set(Code((element,) + code)
                       for element in self.game.elements
                       for code in self.generate(length-1))

    def __init__(self, game):
        super().__init__(game)
        self.possible = self.generate(self.game.length)

    def add_evaluation(self, code, evaluation):
        """ Ενημερώνει το σύνολο των συμβατών κωδικών λέξεων με βάση την
            αποτίμηση μιας κωδικής λέξης.

            code: η κωδική λέξη που αποτιμήθηκε
            evaluation: η αποτίμηση της λέξης (ένα ζεύγος ακέραιων τιμών)
        """
        self.possible = set(pcode for pcode in self.possible
                            if Evaluator.is_compatible(code, pcode, evaluation))


class PossibleSetRandomStrategy(PossibleSetStrategy):
    """ Η στρατηγική αυτή επιλέγει τυχαία μία κωδική λέξη από το σύνολο των
        συμβατών κωδικών λέξεων.
    """

    def suggest_code(self):
        return random.choice(self.possible)

class KnuthStrategy(PossibleSetStrategy):
    """ Σε γενικές γραμμές, ο αλγόριθμος του Knuth επιλέγει σε κάθε προσπάθεια
        εκείνη την κωδική λέξη που ελαχιστοποιεί το μέγιστο πλήθος των συμβατών
        κωδικών λέξεων που θ' απομείνουν.
    """

    def __init__(self, game):
        super().__init__(game)
        # εκτός από το σύνολο των συμβατών κωδικών λέξεων
        #   διατηρείται και το πλήρες σύνολο των κωδικών λέξεων
        #   (πλην εκείνων που έχουν ήδη αποτιμηθεί)
        self.unused = self.possible.copy()

    def suggest_code(self):

        # πλασματική αρχική τιμή για το ελάχιστο μέγιστο πλήθος
        nb_unused = len(self.unused)
        minmaxremaining = nb_unused + 1
        # για κάθε μία από τις κωδικές λέξεις που δεν έχουν αποτιμηθεί
        for code in sorted(self.unused):
            # θα καταμετρηθούν οι πιθανές αποτιμήσεις
            partitions = collections.Counter()
            # σε σχέση με κάθε μία από τις υποψήφιες μυστικές λέξεις
            for pcode in self.possible:
                # αποτίμηση
                evaluation = Evaluator.compare(code, pcode)
                # καταμέτρηση
                partitions[evaluation] += 1

            maxremaining = max(nb_compatible
                               for _, nb_compatible in partitions.items())
            if maxremaining < minmaxremaining:
                # η κωδική λέξη επιλέγεται αν για κάποια αποτίμησή της
                #   ελαχιστοποιείται το μέγιστο πλήθος των υποψήφιων κωδικών
                #   λέξεων που θα απομείνουν
                minmaxremaining = maxremaining
                suggested = code
            elif maxremaining == minmaxremaining:
                # προτιμούνται οι κωδικές λέξεις που ανήκουν στο σύνολο
                #   των υποψήφιων μυστικών λέξεων
                if suggested not in self.possible and code in self.possible:
                    suggested = code                        

        return suggested

    def add_evaluation(self, code, evaluation):
        super().add_evaluation(code, evaluation)
        self.unused.remove(code)


########## κύριο πρόγραμμα

if __name__ == "__main__":

    # το παιχνίδι
    game = MastermindGame()

    # η στρατηγική του codebreaker
    strategy = KnuthStrategy(game)

    # οι παίκτες
    maker = HumanMaker("Άνθρωπε", game)
    breaker = MachineBreaker("Μηχανή", game, strategy)

    # maker = MachineMaker("Μηχανή", game)
    # breaker = HumanAugmentedBreaker("Άνθρωπε", game, strategy)

    # ας παίξουμε!
    game.play(maker, breaker)




"""
Σχόλια επάνω στην υλοποίηση

-   [TODO] Να υλοποιηθεί κύριο πρόγραμμα όπου ο χρήστης επιλέγει το mode του
    παιχνιδιού (ποιοί θα είναι οι παίκτες).

-   [TODO] Προσθήκη δυνατότητας να παιχθούν περισσότερα παιχνίδια (και ίσως
    κάποιο reset() στο παιχνίδι, τους παίκτες και την στρατηγική).

-   Η PossibleSetStrategy.generate θα μπορούσε να μην είναι αναδρομική, αλλά
    επαναληπτική και μάλιστα να κάνει yield τις κωδικές λέξεις που επιστρέφει.
    Δυστυχώς όμως έτσι θα είναι πολύ λιγότερο κατανοητή η λειτουργία της. Θα
    μπορούσε πιθανώς να χρησιμοποιηθεί κάτι από την standard library.
-   Καλύτερη επεξήγηση (πιθανώς και υλοποίηση) για τη μέθοδο του Knuth.
-   Θα είχε νόημα αν κάθε κωδική λέξη περιείχε και το ευρετήριό της; Πιθανώς
    ναι, αλλά μόνο αν η κλάση Code αποθήκευε (σε επίπεδο κλάσης) όλα τα Code
    αντικείμενα που έχουν δημιουργηθεί, για να μην υπάρχει πλεονασμός.
"""
